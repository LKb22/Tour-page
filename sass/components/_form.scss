.form {

  &__group:not(:last-child) {
    margin-bottom: 2rem;

  }

  &__input {
    font-size: 1rem;
    font-family: inherit; // Inherit font-family from body
    color: inherit; // Inherit color from body
    padding: 1.5rem 2rem;
    border-radius: 2px;
    background-color: rgba($color-white, 0.5);
    border: none;
    border-bottom: 3px solid transparent; // Add border-bottom so the second button does not get pushed down when the first is in focus
    width: 90%;
    display: block; //To make it take up its own line
    transition: all .3s;

    @include respond(tablet-portrait) {
      width: 100%;
    }

    &:focus {
      outline: none;
      box-shadow: 0 1rem 2rem rgba($color-black, .1);
      border-bottom: 3px solid $color-primary;
    }

    &:focus:invalid { // When focused and invalid, apply styling
      border-bottom: 3px solid $color-secondary-dark;
    }

    &::-webkit-input-placeholder { // Pseudo element for the placeholder
      color: $color-grey-dark-2;
    }
  }

  &__label {
    font-size:1.2rem;
    font-weight: 700;
    margin-left:2rem;
    margin-top: .7rem;
    display: block; // To use the box model properties
    transition: all .3s;
  }

  // Use placeholder-shown pseudoclass to say, when the placeholder is shown, hide the label (once you start typing, the styling to hide will be removed)
  &__input:placeholder-shown + &__label { // + for adjacent sibling selector (sibling has to be after in html (input then label), ~ for general sibling selector
    opacity: 0;
    visibility: hidden;
    transform: translateY(-4rem);
  }

  &__radio-group {
    width: 49%;
    display: inline-block; // To make the radio buttons sit next to each other with no line break

    @include respond(tablet-portrait) {
      width: 100%;
      margin-bottom: 2rem;
    }
  }

&__radio-input {
    display: none; // To hide the original html radio button
  }

  &__radio-label {
    font-size: $default-font-size;
    cursor: pointer;
    position: relative;
    padding-left: 5rem; // To make room for the radio button
  }

  &__radio-button {
    height: 3rem;
    width: 3rem;
    border: 5px solid $color-primary;
    border-radius: 50%;
    display: inline-block; // To make it sit next to the label
    position: absolute;
    top: -.4rem; // To center the radio button
    left: 0;

    &::after { // Pseudo element to create the inner circle
      content: ''; // To create an empty element
      display: block;
      height: 1.3rem;
      width: 1.3rem;
      border-radius: 50%;
      @include absCenter;
      background-color: $color-primary;
      opacity: 0;
      transition: opacity .2s;
    }
  }

  // Use pseudo class checked to capture when radio input is 'checked'. Select sibling radio-label then child radio-button and change opacity to 1 to show the inner circle styled using the after pseudo element
  &__radio-input:checked + &__radio-label &__radio-button::after {
    opacity: 1;
  }
}
