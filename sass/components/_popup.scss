.popup {
  height:100vh;
  width: 100%;
  position: fixed;
  top: 0;
  left: 0;
  background-color: rgba($color-black, .8);
  z-index: 9999;
  opacity: 0;
  visibility: hidden;
  transition: all .3s;
  -webkit-backdrop-filter: blur(10px);
  backdrop-filter: blur(10px);

  // Feature Query
  @supports (-webkit-backdrop-filter: blur(10px)) or (backdrop-filter: blur(10px)) {
    -webkit-backdrop-filter: blur(10px);
    backdrop-filter: blur(10px);
    background-color: rgba($color-black, .3);
  }
  &__content {
    @include absCenter;
    width: 75%;
    background-color: $color-white;
    box-shadow: 0 2rem 4rem $box-shadow-color;
    border-radius: 3px;
    display: table; // Create a table layout to make left and right table cells to simulate the same height
    overflow: hidden; // Hide image overflow covering border-radius
    opacity: 0; // Start with opacity 0 and animate it to 1 for a fade in effect
    transform: translate(-50%, -50%) scale(.25); // We can only use transform once in each block, so we need to combine transform: translate and scale here.
    transition: all .5s .2s; // Animate the popup opening and closing, with .2s delay to make it look like the content is animating after the background
  }

  &__left {
    width: 33.333333333%;
    display: table-cell;
  }

  &__right {
    width: 66.666666666%;
    display: table-cell;
    vertical-align: middle; // Vertically center the content
    padding: 3rem 5rem;
  }

  &__img {
    display: block;
    width: 100%;
  }

  &__text {
    font-size: 1.4rem;
    margin-bottom: 4rem;

    -moz-column-count: 2;
    -moz-column-gap: 4rem;
    -moz-column-rule: 1px solid $color-grey-light-2;

    column-count: 2; // Create two columns of text
    column-gap: 4rem; // 1em would be 14px in this case
    column-rule: 1px solid $color-grey-light-2; // Add a vertical line between columns

    -moz-hyphens: auto;
    -ms-hyphens: auto;
    -webkit-hyphens: auto;;
    hyphens: auto; // Hyphenate words automatically if they don't fit
  }

  // Open states
  &:target { // using the id popup in html, and adding the id to the buttons' hrefs, the entire element becomes the target for the buttons. Set default to hidden, then use pseudo class :target to show it on click
    opacity: 1;
    visibility: visible;
  }

  &:target &__content { // When popup becomes the target, style the child element of the popup (__content)...
    opacity: 1;
    transform: translate(-50%, -50%) scale(1);
  }

  &__close {
    &:link,
    &:visited {
      color: $color-grey-dark-1;
      position: absolute;
      top: 2.5rem;
      right: 2.5rem;
      font-size: 3rem;
      text-decoration: none;
      display: inline-block;
      transition: all .2s;
      line-height: 1;
    }

    &:hover {
      color: $color-primary;
    }
  }

  @include respond(tab-port) {
    .popup {
      &__content {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
      }

      &__left {
        display: flex;
        width: 100%;
      }

      &__right {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        justify-content: center;
        width: 100%;
        padding: 3rem 5rem;

        .btn--green {
          align-self: flex-end; // Align the button to the right (right now its to the left because of flex-start)
        }
      }

      &__img {
        display: flex;
        width: 50%;
        object-fit: cover;
        margin: 0 auto;
      }

      &__close {
        &:link,
        &:visited {
          top: 1.5rem;
        }
      }
    }
  }
}
