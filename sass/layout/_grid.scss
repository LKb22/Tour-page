.row {
  max-width: $grid-width; // Set a max width for the row
  // Common trick to center block elements inside another block element. margin top and bottom is 0, left and right is auto, meaning it will automatically calculate to center the element with equal margin on both sides
  margin: 0 auto;

  // Set a max width for the row at different breakpoints to make the layout responsive
  @include respond(tablet-landscape) {
    max-width: 85rem;
  }

  @include respond(tablet-portrait-2) {
    max-width: 75rem;
  }

  @include respond(tablet-portrait) {
    max-width: 70rem;
  }

  @include respond(phone) {
    max-width: 70rem;
  }

  @include respond(mobile-lg) {
    max-width: 50rem;
  }

  // Vertical Styling for the row (column)
  &:not(:last-child) { // To select all elements except the last child
    margin-bottom: $gutter-vertical; // Create spacing between elements in a column layout

    // Query
    @include respond(tablet-portrait-2) {
      margin-bottom: $gutter-vertical-small; // Adjust the margin for smaller screens between vertically stacked elements
    }
  }

  @include clearfix; // Include the clearfix mixin to clear the float

  // Horizontal Styling for the columns in each row/section
  [class^="col-"] { // Attribute selector. Using ^, select all elements with class that starts with "col-" (use * for contains, $ for ends with)
    float: left; // To make the element float to the left

    &:not(:last-child) {
      margin-right: $gutter-horizontal; // Add a right margin to all elements except the last child to give spacing between columns

      // For single column layout, remove the right margin and add a bottom margin for the the elements newly stacked in a single column
      @include respond(tablet-portrait-2) {
        margin-right: 0;
        margin-bottom: $gutter-vertical-small;
      }
    }

    // ** IMPORTANT **
    // Override the widths of the columns at tablet-portrait-2 breakpoint to make them full width, creating a single column layout
    @include respond(tablet-portrait-2) {
      width: 100% !important;
    }
  }

  // Set the width of the columns for different layouts
  // Two columns
  .col-1-of-2 {
    width: calc((100% - #{$gutter-horizontal}) / 2);
  }

  // Three columns
  .col-1-of-3 {
    width: calc((100% - 2 * #{$gutter-horizontal}) / 3);
  }

  // 1/3 + 2/3 columns
  .col-2-of-3 {
    width: calc(2 * ((100% - 2 * #{$gutter-horizontal}) / 3) + #{$gutter-horizontal});
  }

  // Four columns
  .col-1-of-4 {
    width: calc((100% - 3 * #{$gutter-horizontal}) / 4);
  }

  // 1/2 + 1/4 + 1/4 columns
  .col-2-of-4 {
    width: calc(2 * ((100% - 3 * #{$gutter-horizontal}) / 4) + #{$gutter-horizontal});
  }

  // 3/4 + 1/4 columns
  .col-3-of-4 {
    width: calc(3 * ((100% - 3 * #{$gutter-horizontal}) / 4) + (2 * (#{$gutter-horizontal})));
  }
}

// limit the width of the row in the features and tours sections
.section-features,
.section-tours {
  .row {
    @include respond(tablet-portrait-2) {
      max-width: 50rem;
    }
  }
}

// ** IMPORTANT **
// Override the column widths for the features section to create a grid layout of 2 by 2
.section-features {
  .row {
    @include respond(laptop) {
      display: grid;
      grid-template-columns: repeat(2, 1fr); // Two equal-width columns
      grid-gap: 4rem; // Add spacing between boxes

      @include respond(tablet-portrait-2) {
        grid-template-columns: 1fr; // Switch to single-column layout for smaller screens
        grid-gap: 0;
      }

      [class^="col-"] {
        width: 100%
      }
    }
  }
}
