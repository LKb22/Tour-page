.row {
  width: $grid-width; // 1140px, use max width for responsive design
  margin: 0 auto; // trick to center block elements inside another block element. margin top and bottom is 0, left and right is auto, meaning it will automatically calculate to center the element with equal margin on both sides

  &:not(:last-child) { // To select all elements except the last child
    margin-bottom: 5rem;

    @include respond(tablet-portrait-2) {
      margin-bottom: $gutter-horizontal;
    }
  }

  @include respond(tablet-portrait-2) {
    max-width: 70rem;
    padding: 0 3.3rem;
  }

  @include clearfix; // include the clearfix mixin to clear the float

  [class^="col-"] { // Attribute selector. Using ^, select all elements with class that starts with "col-" (use * for contains, $ for ends with)
    float: left; // to make the element float to the left

    &:not(:last-child) {
      margin-right: $gutter-horizontal;

      @include respond(tablet-portrait-2) {
        margin-right: 0;
        margin-bottom: $gutter-vertical-small;
      }
    }

    @include respond(tablet-portrait-2) {
      width: 100% !important;
    }
  }

  .col-1-of-2 {
    width: calc((100% - #{$gutter-horizontal}) / 2);
  }

  .col-1-of-3 {
    width: calc((100% - 2 * #{$gutter-horizontal}) / 3);
  }

  .col-2-of-3 {
    width: calc(2 * ((100% - 2 * #{$gutter-horizontal}) / 3) + #{$gutter-horizontal});
  }

  .col-1-of-4 {
    width: calc((100% - 3 * #{$gutter-horizontal}) / 4);
  }

  .col-2-of-4 {
    width: calc(2 * ((100% - 3 * #{$gutter-horizontal}) / 4) + #{$gutter-horizontal});
  }

  .col-3-of-4 {
    width: calc(3 * ((100% - 3 * #{$gutter-horizontal}) / 4) + (2 * (#{$gutter-horizontal})));
  }
}
